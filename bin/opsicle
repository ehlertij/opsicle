#!/usr/bin/env ruby
require 'rubygems'
require 'highline/import'
require 'gli'
require 'opsicle'

include GLI::App

program_desc 'Opsworks Command Line Utility Belt'
version Opsicle::VERSION
program_long_desc "For documentation and help in setting up your configuration files, see Opsicle\'s GitHub repo: https://github.com/sportngin/opsicle"

switch :verbose, :desc => 'Enable Verbose mode for more logging'
switch :debug, :desc => 'Enable Debug mode for detailed logs and backtraces'

desc "Deploy your current app to the given environment stack"
arg_name '<environment>'
command :deploy do |c|
  c.switch [:b, :browser], :desc => "Open the OpsWorks deployments screen for this stack on deploy"
  c.switch [:m, :monitor], :desc => "Open the Opsicle Stack Monitor for this stack on deploy"
  c.action do |global_options, options, args|
    raise ArgumentError, 'You must specify an environment' unless args.first
    Opsicle::Deploy.new(args.first).execute global_options.merge(options)
  end
end

desc "List all apps in the given environment stack"
arg_name '<environment>'
command :list do |c|
  c.action do |global_options, options, args|
    raise ArgumentError, "Environment is required" unless args.first
    Opsicle::List.new(args.first).execute global_options.merge options
  end
end

desc "SSH access to instances in the given environment stack"
arg_name '<environment>'
command :ssh do |c|
  c.action do |global_options, options, args|
    raise ArgumentError, "Environment is required" unless args.first
    Opsicle::SSH.new(args.first).execute global_options.merge(options)
  end
end

desc "Set your user SSH key (PUBLIC KEY) for OpsWorks"
arg_name '<environment> <key-file>'
command 'ssh-key' do |c|
  c.action do |global_options, options, args|
    raise ArgumentError, "Environment is required" unless args.first
    raise ArgumentError, "ssh public key-file is required" unless args[1]
    Opsicle::SSHKey.new(*args).execute global_options.merge(options)
  end
end

desc "Launch the Opsicle Stack Monitor for the given environment stack"
arg_name '<environment>'
command 'monitor' do |c|
  c.action do |global_options, options, args|
    raise ArgumentError, "Environment is required" unless args.first

    @monitor = Opsicle::Monitor::App.new(args.first, global_options.merge(options))
    @monitor.start
  end
end

exit run(ARGV)
